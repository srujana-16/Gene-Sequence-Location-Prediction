{"ast":null,"code":"var _jsxFileName = \"D:\\\\AI-Model-Training-Deployment-Genome-Sequencing_Girlgenius\\\\Frontend\\\\src\\\\components\\\\CompareSequences.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './CompareSequences.css';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// This component houses the code for the Compare Sequences page that allows users to upload two sequence files\n// and compare them to calculate alignment scores.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CompareSequences() {\n  _s();\n  // State to store the selected files\n  const [selectedFile1, setSelectedFile1] = useState(null);\n  const [selectedFile2, setSelectedFile2] = useState(null);\n\n  // State to store the first few lines of the selected files\n  const [fileContent1, setFileContent1] = useState('');\n  const [fileContent2, setFileContent2] = useState('');\n\n  // State to store the alignment score\n  const [AlignmentScore, setAlignmentScore] = useState(null);\n\n  // State to store the loading status while the alignment score is being calculated at the backend\n  const [loading, setLoading] = useState(false);\n\n  // Function to handle the file upload\n  const handleFileChange1 = e => {\n    const file = e.target.files[0];\n    setSelectedFile1(file);\n\n    // If the file is selected, read the first few lines of the file and store it in the state\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = event => {\n        const contents = event.target.result;\n        const firstFewLines = contents.split('\\n').slice(0, 3).join('\\n');\n        setFileContent1(firstFewLines);\n      };\n\n      // Read the file as text\n      reader.readAsText(file);\n    }\n  };\n\n  // Function to handle the file upload\n  const handleFileChange2 = e => {\n    const file = e.target.files[0];\n    setSelectedFile2(file);\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = event => {\n        const contents = event.target.result;\n        const firstFewLines = contents.split('\\n').slice(0, 3).join('\\n');\n        setFileContent2(firstFewLines);\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  // Function to handle the compare sequences button click\n  const handleCompareSequences = async () => {\n    // If two files are selected, send a POST request to the backend to calculate the alignment score\n    if (selectedFile1 && selectedFile2) {\n      try {\n        // Set loading to true while the alignment score is being calculated\n        setLoading(true);\n\n        // Create a FormData object to send the files to the backend\n        const formData = new FormData();\n        formData.append('file1', selectedFile1);\n        formData.append('file2', selectedFile2);\n\n        // Send a POST request to the backend to calculate the alignment score\n        const response = await axios.post('http://localhost:8000/align_seq', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n\n        // Store the alignment score in the state\n        const alignmentScore = response.data;\n\n        // Set the alignment score in the state\n        setAlignmentScore(alignmentScore.score);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        // Set loading to false once the alignment score is calculated\n        setLoading(false);\n      }\n    } else {\n      // If two files are not selected, show an alert to the user\n      alert('Please select two files to compare.');\n    }\n  };\n\n  // UseEffect hook to log the alignment score to the console for debugging purposes\n  useEffect(() => {\n    if (AlignmentScore) {\n      console.log('AlignmentScore', AlignmentScore);\n    }\n  }, [AlignmentScore]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"compare-genome-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"compare-genome-section-title\",\n        children: [\"Compare Sequences\", /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"compare-genome-section-intro\",\n          children: \"Upload two sequence files to compare them and calculate alignment scores.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"compare-sections\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"compare-file-content-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"File 1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 25\n          }, this), fileContent1 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"compare-file-content\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: fileContent1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"compare-file-content-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"File 2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }, this), fileContent2 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"compare-file-content\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: fileContent2\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"compare-button-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"compare-upload-button\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \".txt, .fasta, .fastq\",\n            onChange: handleFileChange1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Select File 1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"compare-button\",\n          onClick: handleCompareSequences,\n          children: \"Compare Sequences\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"compare-upload-button\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \".txt, .fasta, .fastq\",\n            onChange: handleFileChange2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Select File 2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"compare-score-box\",\n        children: loading ? /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Loading alignment score...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 25\n        }, this) : AlignmentScore === null ? /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Upload two sequences.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"The alignment score is \", AlignmentScore, \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n}\n_s(CompareSequences, \"IcHLpkURC0gSDBhmbU1M4rr+cyA=\");\n_c = CompareSequences;\nexport default CompareSequences;\nvar _c;\n$RefreshReg$(_c, \"CompareSequences\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","CompareSequences","_s","selectedFile1","setSelectedFile1","selectedFile2","setSelectedFile2","fileContent1","setFileContent1","fileContent2","setFileContent2","AlignmentScore","setAlignmentScore","loading","setLoading","handleFileChange1","e","file","target","files","reader","FileReader","onload","event","contents","result","firstFewLines","split","slice","join","readAsText","handleFileChange2","handleCompareSequences","formData","FormData","append","response","post","headers","alignmentScore","data","score","error","console","log","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","onClick","_c","$RefreshReg$"],"sources":["D:/AI-Model-Training-Deployment-Genome-Sequencing_Girlgenius/Frontend/src/components/CompareSequences.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './CompareSequences.css';\r\nimport axios from 'axios';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// This component houses the code for the Compare Sequences page that allows users to upload two sequence files\r\n// and compare them to calculate alignment scores.\r\nfunction CompareSequences() {\r\n\r\n    // State to store the selected files\r\n    const [selectedFile1, setSelectedFile1] = useState(null);\r\n    const [selectedFile2, setSelectedFile2] = useState(null);\r\n\r\n    // State to store the first few lines of the selected files\r\n    const [fileContent1, setFileContent1] = useState('');\r\n    const [fileContent2, setFileContent2] = useState('');\r\n\r\n    // State to store the alignment score\r\n    const [AlignmentScore, setAlignmentScore] = useState(null);\r\n\r\n    // State to store the loading status while the alignment score is being calculated at the backend\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    // Function to handle the file upload\r\n    const handleFileChange1 = (e) => {\r\n        const file = e.target.files[0];\r\n        setSelectedFile1(file);\r\n\r\n        // If the file is selected, read the first few lines of the file and store it in the state\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onload = (event) => {\r\n                const contents = event.target.result;\r\n                const firstFewLines = contents.split('\\n').slice(0, 3).join('\\n');\r\n                setFileContent1(firstFewLines);\r\n            };\r\n\r\n            // Read the file as text\r\n            reader.readAsText(file);\r\n        }\r\n    };\r\n\r\n    // Function to handle the file upload\r\n    const handleFileChange2 = (e) => {\r\n        const file = e.target.files[0];\r\n        setSelectedFile2(file);\r\n\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onload = (event) => {\r\n                const contents = event.target.result;\r\n                const firstFewLines = contents.split('\\n').slice(0, 3).join('\\n');\r\n                setFileContent2(firstFewLines);\r\n            };\r\n            reader.readAsText(file);\r\n        }\r\n    };\r\n\r\n    // Function to handle the compare sequences button click\r\n    const handleCompareSequences = async () => {\r\n\r\n        // If two files are selected, send a POST request to the backend to calculate the alignment score\r\n        if (selectedFile1 && selectedFile2) {\r\n            try {\r\n\r\n                // Set loading to true while the alignment score is being calculated\r\n                setLoading(true);\r\n\r\n                // Create a FormData object to send the files to the backend\r\n                const formData = new FormData();\r\n                formData.append('file1', selectedFile1);\r\n                formData.append('file2', selectedFile2);\r\n                \r\n                // Send a POST request to the backend to calculate the alignment score\r\n                const response = await axios.post('http://localhost:8000/align_seq', formData, {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data',\r\n                    },\r\n                });\r\n\r\n                // Store the alignment score in the state\r\n                const alignmentScore = response.data;\r\n\r\n                // Set the alignment score in the state\r\n                setAlignmentScore(alignmentScore.score);\r\n            } catch (error) {\r\n                console.log(error);\r\n            } finally {\r\n                // Set loading to false once the alignment score is calculated\r\n                setLoading(false);\r\n            }\r\n        } else {\r\n            // If two files are not selected, show an alert to the user\r\n            alert('Please select two files to compare.');\r\n        }\r\n    };\r\n\r\n    // UseEffect hook to log the alignment score to the console for debugging purposes\r\n    useEffect(() => {\r\n        if (AlignmentScore) {\r\n            console.log('AlignmentScore', AlignmentScore);\r\n        }\r\n    }, [AlignmentScore]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"compare-genome-section\">\r\n                <div className=\"compare-genome-section-title\">\r\n                    Compare Sequences\r\n                    <p className=\"compare-genome-section-intro\">\r\n                        Upload two sequence files to compare them and calculate alignment scores.\r\n                    </p>\r\n                </div>\r\n\r\n                <div className=\"compare-sections\">\r\n                    <div className=\"compare-file-content-box\">\r\n                        <h3>File 1</h3>\r\n                        {fileContent1 && (\r\n                            <div className=\"compare-file-content\">\r\n                                <p>{fileContent1}</p>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n\r\n                    <div className=\"compare-file-content-box\">\r\n                        <h3>File 2</h3>\r\n                        {fileContent2 && (\r\n                            <div className=\"compare-file-content\">\r\n                                <p>{fileContent2}</p>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n                <div className=\"compare-button-wrapper\">\r\n                    <label className=\"compare-upload-button\">\r\n                        <input\r\n                            type=\"file\"\r\n                            accept=\".txt, .fasta, .fastq\"\r\n                            onChange={handleFileChange1}\r\n                        />\r\n                        <span>Select File 1</span>\r\n                    </label>\r\n                    <button className=\"compare-button\" onClick={handleCompareSequences}>\r\n                        Compare Sequences\r\n                    </button>\r\n                    <label className=\"compare-upload-button\">\r\n                        <input\r\n                            type=\"file\"\r\n                            accept=\".txt, .fasta, .fastq\"\r\n                            onChange={handleFileChange2}\r\n                        />\r\n                        <span>Select File 2</span>\r\n                    </label>\r\n                </div>\r\n                <div className=\"compare-score-box\">\r\n                    {loading ? (\r\n                        <h3>Loading alignment score...</h3>\r\n                    ) : AlignmentScore === null ? (\r\n                        <h3>Upload two sequences.</h3>\r\n                    ) : (\r\n                        <h3>The alignment score is {AlignmentScore}.</h3>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CompareSequences;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}