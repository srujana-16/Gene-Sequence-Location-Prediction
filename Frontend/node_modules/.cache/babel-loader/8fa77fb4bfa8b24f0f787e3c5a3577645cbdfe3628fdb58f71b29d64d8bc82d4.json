{"ast":null,"code":"var _jsxFileName = \"D:\\\\AI-Model-Training-Deployment-Genome-Sequencing_Girlgenius\\\\Frontend\\\\src\\\\components\\\\CompareSequences.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// ... (your imports)\n\nfunction CompareSequences() {\n  _s();\n  // ... (your existing state declarations)\n\n  const [loading, setLoading] = useState(false);\n  const handleCompareSequences = async () => {\n    if (selectedFile1 && selectedFile2) {\n      try {\n        setLoading(true); // Set loading to true when starting the request\n\n        const formData = new FormData();\n        formData.append('file1', selectedFile1);\n        formData.append('file2', selectedFile2);\n        const response = await axios.post('http://localhost:8000/align_seq', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        const alignmentScore = response.data;\n        setAlignmentScore(alignmentScore.score);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false); // Set loading to false after the request is completed\n      }\n    } else {\n      alert('Please select two files to compare.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"compare-genome-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"compare-score-box\",\n        children: loading ? /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Loading alignment score...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 25\n        }, this) : AlignmentScore === null ? /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Upload two sequences.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"The alignment score is \", AlignmentScore, \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n}\n_s(CompareSequences, \"/Rjh5rPqCCqf0XYnTUk9ZNavw3Q=\");\n_c = CompareSequences;\nexport default CompareSequences;\nvar _c;\n$RefreshReg$(_c, \"CompareSequences\");","map":{"version":3,"names":["CompareSequences","_s","loading","setLoading","useState","handleCompareSequences","selectedFile1","selectedFile2","formData","FormData","append","response","axios","post","headers","alignmentScore","data","setAlignmentScore","score","error","console","log","alert","_jsxDEV","className","children","fileName","_jsxFileName","lineNumber","columnNumber","AlignmentScore","_c","$RefreshReg$"],"sources":["D:/AI-Model-Training-Deployment-Genome-Sequencing_Girlgenius/Frontend/src/components/CompareSequences.js"],"sourcesContent":["// ... (your imports)\r\n\r\nfunction CompareSequences() {\r\n    // ... (your existing state declarations)\r\n\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const handleCompareSequences = async () => {\r\n        if (selectedFile1 && selectedFile2) {\r\n            try {\r\n                setLoading(true); // Set loading to true when starting the request\r\n\r\n                const formData = new FormData();\r\n                formData.append('file1', selectedFile1);\r\n                formData.append('file2', selectedFile2);\r\n\r\n                const response = await axios.post('http://localhost:8000/align_seq', formData, {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data',\r\n                    },\r\n                });\r\n                const alignmentScore = response.data;\r\n                setAlignmentScore(alignmentScore.score);\r\n            } catch (error) {\r\n                console.log(error);\r\n            } finally {\r\n                setLoading(false); // Set loading to false after the request is completed\r\n            }\r\n        } else {\r\n            alert('Please select two files to compare.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"compare-genome-section\">\r\n                {/* ... (your existing JSX) */}\r\n                <div className=\"compare-score-box\">\r\n                    {loading ? (\r\n                        <h3>Loading alignment score...</h3>\r\n                    ) : AlignmentScore === null ? (\r\n                        <h3>Upload two sequences.</h3>\r\n                    ) : (\r\n                        <h3>The alignment score is {AlignmentScore}.</h3>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CompareSequences;\r\n"],"mappings":";;;AAAA;;AAEA,SAASA,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EACxB;;EAEA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGC,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMC,sBAAsB,GAAG,MAAAA,CAAA,KAAY;IACvC,IAAIC,aAAa,IAAIC,aAAa,EAAE;MAChC,IAAI;QACAJ,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;;QAElB,MAAMK,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;QAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEJ,aAAa,CAAC;QACvCE,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,aAAa,CAAC;QAEvC,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACC,IAAI,CAAC,iCAAiC,EAAEL,QAAQ,EAAE;UAC3EM,OAAO,EAAE;YACL,cAAc,EAAE;UACpB;QACJ,CAAC,CAAC;QACF,MAAMC,cAAc,GAAGJ,QAAQ,CAACK,IAAI;QACpCC,iBAAiB,CAACF,cAAc,CAACG,KAAK,CAAC;MAC3C,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACtB,CAAC,SAAS;QACNhB,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACvB;IACJ,CAAC,MAAM;MACHmB,KAAK,CAAC,qCAAqC,CAAC;IAChD;EACJ,CAAC;EAED,oBACIC,OAAA;IAAKC,SAAS,EAAC,KAAK;IAAAC,QAAA,eAChBF,OAAA;MAAKC,SAAS,EAAC,wBAAwB;MAAAC,QAAA,eAEnCF,OAAA;QAAKC,SAAS,EAAC,mBAAmB;QAAAC,QAAA,EAC7BvB,OAAO,gBACJqB,OAAA;UAAAE,QAAA,EAAI;QAA0B;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,GACnCC,cAAc,KAAK,IAAI,gBACvBP,OAAA;UAAAE,QAAA,EAAI;QAAqB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,gBAE9BN,OAAA;UAAAE,QAAA,GAAI,yBAAuB,EAACK,cAAc,EAAC,GAAC;QAAA;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MACnD;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAAC5B,EAAA,CA/CQD,gBAAgB;AAAA+B,EAAA,GAAhB/B,gBAAgB;AAiDzB,eAAeA,gBAAgB;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}