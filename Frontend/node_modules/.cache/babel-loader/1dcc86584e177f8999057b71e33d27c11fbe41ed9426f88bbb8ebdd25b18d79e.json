{"ast":null,"code":"var _jsxFileName = \"D:\\\\AI-Model-Training-Deployment-Genome-Sequencing_Girlgenius\\\\Frontend\\\\src\\\\components\\\\MainContent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Chart from 'chart.js/auto';\nimport { Link } from 'react-router-dom';\nimport MapComponent from './MapComponent';\n\n// This component houses the code for the main content of the application that allows users to upload a sequence file\n// or type a sequence and predict the location of origin of the sequence. This component also houses the redirect buttons\n// to the Data Visualization and Compare Sequences pages.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MainContent() {\n  _s();\n  // States to store the selected file and the first few lines of the file\n  const [selectedFile, setSelectedFile] = useState(null);\n\n  // State to store the dark mode status (not used in this version of the application)\n  const [darkMode, setDarkMode] = useState(false);\n\n  // State to store the reference to the About Us section (not used in this version of the application)\n  const aboutUsRef = useRef(null);\n\n  // State to store the selected file content\n  const [fileContent, setFileContent] = useState('');\n\n  // State to store the About Us section visibility status (not used in this version of the application)\n  const [showAboutUs, setShowAboutUs] = useState(false);\n\n  // State to store the prediction data received from the backend\n  const [predictionData, setPredictionData] = useState(null);\n\n  // State to store the state of the prediction box\n  const [predictionClose, setPredictionClose] = useState(true);\n\n  // State to store the most likely location\n  const [mostLikelyLocation, setMostLikelyLocation] = useState(null);\n\n  // State to store the manual sequence (debugging purposes)\n  const [manualSequence, setManualSequence] = useState('');\n\n  // State to store the typing mode status\n  const [typingMode, setTypingMode] = useState(false);\n\n  // scroll event listener\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  // Function to handle the file upload\n  const handleFileChange = e => {\n    const file = e.target.files[0];\n    setSelectedFile(file);\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = event => {\n        const contents = event.target.result;\n        const firstFewLines = contents.split('\\n').slice(0, 3).join('\\n');\n        setFileContent(firstFewLines);\n      };\n\n      // Read the file as text\n      reader.readAsText(file);\n    }\n\n    // Disable typing mode\n    setTypingMode(false);\n  };\n\n  // Function to handle the file content change\n  const handleFileContentChange = e => {\n    setFileContent(e.target.value);\n    setSelectedFile(null);\n  };\n\n  // Enable typing mode\n  const handleTypeSequence = () => {\n    // Enable typing mode\n    setTypingMode(true);\n\n    // Clear the selected file and file content\n    setSelectedFile(null);\n    setFileContent('');\n  };\n\n  // Function to scroll to the About Us section (not used in this version of the application)\n  const scrollToAboutUs = () => {\n    if (aboutUsRef.current) {\n      window.scrollTo({\n        behavior: 'smooth',\n        top: aboutUsRef.current.offsetTop\n      });\n      setShowAboutUs(true);\n    }\n  };\n\n  // Function to handle the scroll event\n  const handleScroll = () => {\n    const windowHeight = window.innerHeight;\n    const documentHeight = document.documentElement.scrollHeight;\n    const scrollPosition = window.scrollY;\n    if (scrollPosition > documentHeight - windowHeight - 200) {\n      setShowAboutUs(true);\n    } else {\n      setShowAboutUs(false);\n    }\n  };\n\n  // Function to handle the predict button click\n  const handlePredict = async () => {\n    // Check if a file is selected or if the user is in typing mode\n    // If yes, send a POST request to the backend to predict the location of origin of the sequence\n    if (selectedFile || typingMode) {\n      try {\n        // Create a FormData object to send the file to the backend\n        const formData = new FormData();\n        if (selectedFile) {\n          formData.append('file', selectedFile);\n        } else if (typingMode) {\n          // Get the content of the textarea\n          const Content = document.querySelector('.file-content textarea').value;\n\n          // Set the file content to the textarea content\n          setFileContent(Content);\n          setManualSequence(fileContent);\n\n          // Create a file from the textarea content\n          const file = new File([Content], 'manualSequence.txt', {\n            type: 'text/plain'\n          });\n\n          // Append the file to the FormData object\n          formData.append('file', file);\n        }\n\n        // Send a POST request to the backend to get the location predictions\n        const response = await axios.post('http://localhost:8000/send_seq', formData);\n        const prediction = response.data;\n\n        // Update the state with the prediction data\n        setPredictionData(prediction);\n\n        // toggle predictionClose\n        setPredictionClose(false);\n\n        // Get the top locatiobs\n        const labels = Object.keys(prediction);\n\n        // Set the most likely location as the first location\n        setMostLikelyLocation(labels[0]);\n        //console.log(mostLikelyLocation);\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    } else {\n      console.error('No file selected');\n    }\n  };\n  const handlePredictionButton = () => {\n    // toggle predictionClose\n    setPredictionClose(true);\n  };\n\n  // function to create doughtnut chart to display prediction data\n  const createChart = () => {\n    // Get the chart container\n    const chartContainer = document.querySelector('.prediction-chart');\n\n    // Check if the chart container is found\n    if (chartContainer) {\n      var _Chart$getChart;\n      (_Chart$getChart = Chart.getChart(chartContainer)) === null || _Chart$getChart === void 0 ? void 0 : _Chart$getChart.destroy();\n\n      // remove canvas element if it exists to prevent multiple charts from being created\n      if (chartContainer !== null && chartContainer !== void 0 && chartContainer.firstChild) {\n        chartContainer.removeChild(chartContainer.firstChild);\n      }\n\n      // Create a canvas element within the chart container\n      const canvas = document.createElement('canvas');\n      chartContainer.appendChild(canvas);\n\n      // Get the 2D context of the canvas\n      const ctx = canvas.getContext('2d');\n\n      // extract labels and data from predictionData json\n      const labels = Object.keys(predictionData);\n      const data = Object.values(predictionData);\n\n      // Create the chart using Chart.js and the extracted prediction data\n      new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: labels,\n          datasets: [{\n            data: data,\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              position: 'bottom'\n            }\n          }\n        }\n      });\n    }\n  };\n\n  // log predictionData (debugging purposes)\n  useEffect(() => {\n    if (predictionData && !predictionClose) {\n      // This will run every time predictionData changes\n      console.log(\"Prediction Data has been updated:\", predictionData);\n      createChart();\n      const labels = Object.keys(predictionData);\n      setMostLikelyLocation(labels[0]);\n    }\n  }, [predictionData, predictionClose, mostLikelyLocation]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navigation\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"navigation-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/data-visualization\",\n            className: \"link-without-underline\",\n            children: \"Data Visualization\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/compare-sequences\",\n            className: \"link-without-underline\",\n            children: \"Compare Sequences\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"genome-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"genome-section-title\",\n        children: [\"Sequence Location Prediction\", /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"genome-section-intro\",\n          children: \"Upload your sequence file to predict the location of origin of the sequence.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 17\n      }, this), predictionClose && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `file-content-box`,\n        children: [selectedFile && fileContent ? /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \" Sequence uploaded.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \" No file selected.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `file-content`,\n          children: typingMode ? /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: fileContent,\n            onChange: handleFileContentChange,\n            placeholder: \"Type your sequence here...\",\n            style: {\n              width: '100%',\n              minHeight: '300px',\n              resize: 'none',\n              padding: '10px',\n              boxSizing: 'border-box',\n              border: 'none',\n              outline: 'none'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: fileContent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"predict-button\",\n            onClick: handlePredict,\n            children: \"Predict Location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"upload-button\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              accept: \".txt, .fasta\",\n              onChange: handleFileChange,\n              style: {\n                display: 'none'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Select File\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"type-sequence-button\",\n            onClick: handleTypeSequence,\n            children: \"Type Sequence\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 21\n      }, this), predictionData && !predictionClose && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `prediction-box`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"prediction-title-wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Prediction Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            class: \"btn-close\",\n            \"aria-label\": \"Close\",\n            onClick: handlePredictionButton\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `prediction-content`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"prediction-chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"prediction-text\",\n            children: [\"Your sample is most likely from \", mostLikelyLocation, \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"prediction-map\",\n            children: /*#__PURE__*/_jsxDEV(MapComponent, {\n              location: mostLikelyLocation\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 9\n  }, this);\n}\n_s(MainContent, \"/rQx3UqrVYbUu7pnUFhTZJivQR8=\");\n_c = MainContent;\nexport default MainContent;\nvar _c;\n$RefreshReg$(_c, \"MainContent\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","Chart","Link","MapComponent","jsxDEV","_jsxDEV","MainContent","_s","selectedFile","setSelectedFile","darkMode","setDarkMode","aboutUsRef","fileContent","setFileContent","showAboutUs","setShowAboutUs","predictionData","setPredictionData","predictionClose","setPredictionClose","mostLikelyLocation","setMostLikelyLocation","manualSequence","setManualSequence","typingMode","setTypingMode","window","addEventListener","handleScroll","removeEventListener","handleFileChange","e","file","target","files","reader","FileReader","onload","event","contents","result","firstFewLines","split","slice","join","readAsText","handleFileContentChange","value","handleTypeSequence","scrollToAboutUs","current","scrollTo","behavior","top","offsetTop","windowHeight","innerHeight","documentHeight","document","documentElement","scrollHeight","scrollPosition","scrollY","handlePredict","formData","FormData","append","Content","querySelector","File","type","response","post","prediction","data","labels","Object","keys","error","console","handlePredictionButton","createChart","chartContainer","_Chart$getChart","getChart","destroy","firstChild","removeChild","canvas","createElement","appendChild","ctx","getContext","values","datasets","borderWidth","options","responsive","maintainAspectRatio","plugins","legend","position","log","className","children","to","fileName","_jsxFileName","lineNumber","columnNumber","onChange","placeholder","style","width","minHeight","resize","padding","boxSizing","border","outline","onClick","accept","display","class","location","_c","$RefreshReg$"],"sources":["D:/AI-Model-Training-Deployment-Genome-Sequencing_Girlgenius/Frontend/src/components/MainContent.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './App.css';\r\nimport axios from 'axios';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport Chart from 'chart.js/auto';\r\nimport { Link } from 'react-router-dom';\r\nimport MapComponent from './MapComponent';\r\n\r\n// This component houses the code for the main content of the application that allows users to upload a sequence file\r\n// or type a sequence and predict the location of origin of the sequence. This component also houses the redirect buttons\r\n// to the Data Visualization and Compare Sequences pages.\r\nfunction MainContent() {\r\n\r\n    // States to store the selected file and the first few lines of the file\r\n    const [selectedFile, setSelectedFile] = useState(null);\r\n\r\n    // State to store the dark mode status (not used in this version of the application)\r\n    const [darkMode, setDarkMode] = useState(false);\r\n\r\n    // State to store the reference to the About Us section (not used in this version of the application)\r\n    const aboutUsRef = useRef(null);\r\n\r\n    // State to store the selected file content\r\n    const [fileContent, setFileContent] = useState('');\r\n\r\n    // State to store the About Us section visibility status (not used in this version of the application)\r\n    const [showAboutUs, setShowAboutUs] = useState(false);\r\n\r\n    // State to store the prediction data received from the backend\r\n    const [predictionData, setPredictionData] = useState(null);\r\n\r\n    // State to store the state of the prediction box\r\n    const [predictionClose, setPredictionClose] = useState(true);\r\n\r\n    // State to store the most likely location\r\n    const [mostLikelyLocation, setMostLikelyLocation] = useState(null);\r\n\r\n    // State to store the manual sequence (debugging purposes)\r\n    const [manualSequence, setManualSequence] = useState('');\r\n\r\n    // State to store the typing mode status\r\n    const [typingMode, setTypingMode] = useState(false);\r\n\r\n    // scroll event listener\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', handleScroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', handleScroll);\r\n        };\r\n    }, []);\r\n\r\n    // Function to handle the file upload\r\n    const handleFileChange = (e) => {\r\n        const file = e.target.files[0];\r\n        setSelectedFile(file);\r\n\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onload = (event) => {\r\n                const contents = event.target.result;\r\n                const firstFewLines = contents.split('\\n').slice(0, 3).join('\\n');\r\n                setFileContent(firstFewLines);\r\n            };\r\n\r\n            // Read the file as text\r\n            reader.readAsText(file);\r\n        }\r\n\r\n        // Disable typing mode\r\n        setTypingMode(false);\r\n    };\r\n\r\n    // Function to handle the file content change\r\n    const handleFileContentChange = (e) => {\r\n        setFileContent(e.target.value);\r\n        setSelectedFile(null);\r\n    };\r\n\r\n    // Enable typing mode\r\n    const handleTypeSequence = () => {\r\n\r\n        // Enable typing mode\r\n        setTypingMode(true);\r\n\r\n        // Clear the selected file and file content\r\n        setSelectedFile(null);\r\n        setFileContent('');\r\n    };\r\n\r\n    // Function to scroll to the About Us section (not used in this version of the application)\r\n    const scrollToAboutUs = () => {\r\n        if (aboutUsRef.current) {\r\n            window.scrollTo({\r\n                behavior: 'smooth',\r\n                top: aboutUsRef.current.offsetTop,\r\n            });\r\n            setShowAboutUs(true);\r\n        }\r\n    };\r\n\r\n    // Function to handle the scroll event\r\n    const handleScroll = () => {\r\n        const windowHeight = window.innerHeight;\r\n        const documentHeight = document.documentElement.scrollHeight;\r\n        const scrollPosition = window.scrollY;\r\n\r\n        if (scrollPosition > documentHeight - windowHeight - 200) {\r\n            setShowAboutUs(true);\r\n        } else {\r\n            setShowAboutUs(false);\r\n        }\r\n    };\r\n\r\n    // Function to handle the predict button click\r\n    const handlePredict = async () => {\r\n\r\n        // Check if a file is selected or if the user is in typing mode\r\n        // If yes, send a POST request to the backend to predict the location of origin of the sequence\r\n        if (selectedFile || typingMode) {\r\n            try {\r\n\r\n                // Create a FormData object to send the file to the backend\r\n                const formData = new FormData();\r\n\r\n                if (selectedFile) {\r\n                    formData.append('file', selectedFile);\r\n                }\r\n                else if (typingMode) {\r\n\r\n                    // Get the content of the textarea\r\n                    const Content = document.querySelector('.file-content textarea').value;\r\n\r\n                    // Set the file content to the textarea content\r\n                    setFileContent(Content);\r\n                    setManualSequence(fileContent);\r\n\r\n                    // Create a file from the textarea content\r\n                    const file = new File([Content], 'manualSequence.txt', { type: 'text/plain' });\r\n\r\n                    // Append the file to the FormData object\r\n                    formData.append('file', file);\r\n                }\r\n                \r\n                // Send a POST request to the backend to get the location predictions\r\n                const response = await axios.post('http://localhost:8000/send_seq', formData);\r\n                const prediction = response.data;\r\n\r\n                // Update the state with the prediction data\r\n                setPredictionData(prediction);\r\n\r\n                // toggle predictionClose\r\n                setPredictionClose(false);\r\n\r\n                // Get the top locatiobs\r\n                const labels = Object.keys(prediction);\r\n\r\n                // Set the most likely location as the first location\r\n                setMostLikelyLocation(labels[0]);\r\n                //console.log(mostLikelyLocation);\r\n\r\n            } catch (error) {\r\n                console.error('Error:', error);\r\n            }\r\n\r\n        } else {\r\n            console.error('No file selected');\r\n        }\r\n    };\r\n\r\n    const handlePredictionButton = () => {\r\n        // toggle predictionClose\r\n        setPredictionClose(true);\r\n    }\r\n\r\n    // function to create doughtnut chart to display prediction data\r\n    const createChart = () => {\r\n\r\n        // Get the chart container\r\n        const chartContainer = document.querySelector('.prediction-chart');\r\n\r\n        // Check if the chart container is found\r\n        if (chartContainer) {\r\n\r\n            Chart.getChart(chartContainer)?.destroy();\r\n\r\n            // remove canvas element if it exists to prevent multiple charts from being created\r\n            if (chartContainer?.firstChild) {\r\n                chartContainer.removeChild(chartContainer.firstChild);\r\n            }\r\n\r\n            // Create a canvas element within the chart container\r\n            const canvas = document.createElement('canvas');\r\n\r\n            chartContainer.appendChild(canvas);\r\n\r\n            // Get the 2D context of the canvas\r\n            const ctx = canvas.getContext('2d');\r\n\r\n            // extract labels and data from predictionData json\r\n            const labels = Object.keys(predictionData);\r\n            const data = Object.values(predictionData);\r\n\r\n            // Create the chart using Chart.js and the extracted prediction data\r\n            new Chart(ctx, {\r\n                type: 'doughnut',\r\n                data: {\r\n                    labels: labels,\r\n                    datasets: [{\r\n                        data: data,\r\n                        borderWidth: 1\r\n                    }]\r\n                },\r\n                options: {\r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                    plugins: {\r\n                        legend: {\r\n                            position: 'bottom'\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n    };\r\n\r\n    // log predictionData (debugging purposes)\r\n    useEffect(() => {\r\n        if (predictionData && !predictionClose) {\r\n            // This will run every time predictionData changes\r\n            console.log(\"Prediction Data has been updated:\", predictionData);\r\n            createChart();\r\n            const labels = Object.keys(predictionData);\r\n            setMostLikelyLocation(labels[0]);\r\n        }\r\n    }, [predictionData, predictionClose, mostLikelyLocation]);\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <nav className=\"navigation\">\r\n                <ul className=\"navigation-list\">\r\n                    <li><Link to=\"/data-visualization\" className=\"link-without-underline\">Data Visualization</Link></li>\r\n                    <li><Link to=\"/compare-sequences\" className=\"link-without-underline\">Compare Sequences</Link></li>\r\n                    {/*<li><Link to=\"/about-us\" className=\"link-without-underline\">About Us</Link></li>*/}\r\n                </ul>\r\n            </nav>\r\n\r\n            <div className=\"genome-section\">\r\n                <div className=\"genome-section-title\">\r\n                    Sequence Location Prediction\r\n                    <p className=\"genome-section-intro\">\r\n                        Upload your sequence file to predict the location of origin of the sequence.\r\n                    </p>\r\n                </div>\r\n\r\n                {/* If the user is has not clicked on the predict button, show the file content box */}\r\n                {predictionClose && (\r\n                    <div className={`file-content-box`}>\r\n                        {(selectedFile && fileContent) ? (\r\n                            <h3> Sequence uploaded.</h3>\r\n                        ) : (\r\n                            <h3> No file selected.</h3>\r\n                        )}\r\n\r\n                        <div className={`file-content`}>\r\n                            {typingMode ? (\r\n                                <textarea\r\n                                    value={fileContent}\r\n                                    onChange={handleFileContentChange}\r\n                                    placeholder=\"Type your sequence here...\"\r\n                                    style={{\r\n                                        width: '100%',\r\n                                        minHeight: '300px',\r\n                                        resize: 'none',\r\n                                        padding: '10px',\r\n                                        boxSizing: 'border-box',\r\n                                        border: 'none',\r\n                                        outline: 'none',\r\n                                    }}\r\n                                />\r\n                            ) : (\r\n                                <p>{fileContent}</p>\r\n                            )}\r\n                        </div>\r\n                        <div className='button-wrapper'>\r\n                            <button className=\"predict-button\" onClick={handlePredict}>Predict Location</button>\r\n                            <label className=\"upload-button\">\r\n                                <input\r\n                                    type=\"file\"\r\n                                    accept=\".txt, .fasta\"\r\n                                    onChange={handleFileChange}\r\n                                    style={{ display: 'none' }}\r\n                                />\r\n                                <span>Select File</span>\r\n                            </label>\r\n                            <button className=\"type-sequence-button\" onClick={handleTypeSequence}>Type Sequence</button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                {/* If the prediction data is available, show the prediction box */}\r\n                {predictionData && !predictionClose && (\r\n                    <div className={`prediction-box`}>\r\n                        <div className='prediction-title-wrapper'>\r\n                            <h3>Prediction Data</h3>\r\n                            <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" onClick={handlePredictionButton}></button>\r\n                        </div>\r\n                        <div className={`prediction-content`}>\r\n                            <div className=\"prediction-chart\">\r\n                            </div>\r\n                            <div className=\"prediction-text\">\r\n                                Your sample is most likely from {mostLikelyLocation}.\r\n                            </div>\r\n                            <div className=\"prediction-map\">\r\n                                {/* The most likely location is displayed on a map */}\r\n                                <MapComponent location={mostLikelyLocation} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MainContent;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}