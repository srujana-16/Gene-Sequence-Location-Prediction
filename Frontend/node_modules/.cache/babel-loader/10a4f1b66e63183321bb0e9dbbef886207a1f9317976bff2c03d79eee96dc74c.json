{"ast":null,"code":"var _jsxFileName = \"D:\\\\AI-Model-Training-Deployment-Genome-Sequencing_Girlgenius\\\\Frontend\\\\src\\\\components\\\\MapComponent.js\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport axios from 'axios';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\n\n// This component houses the code for the Map page that shows the most likely location of the sequence on a dynamic and interactive map.\n\n// The MapComponent to be rendered on the MainContent component\nconst MapComponent = ({\n  location\n}) => {\n  _s2();\n  var _s = $RefreshSig$();\n  // State to store the coordinates of the location\n  const [coordinates, setCoordinates] = useState(null);\n\n  // State to store the loading status while the coordinates are being fetched\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Function to fetch the coordinates of the location using the OpenStreetMap API\n  const fetchCoordinates = async () => {\n    _s();\n    // Search for the location coordinates using the OpenStreetMap API\n    try {\n      // Send a GET request to the OpenStreetMap API to fetch the coordinates\n      const response = await axios.get(`https://nominatim.openstreetmap.org/search?format=json&q=${location}`);\n\n      // If the response is not empty, set the coordinates state\n      if (response.data && response.data.length > 0) {\n        var {\n          lat,\n          lon\n        } = response.data[0];\n        setCoordinates([parseFloat(lat), parseFloat(lon)]);\n      }\n    } catch (error) {\n      console.error('Error fetching coordinates:', error);\n    } finally {\n      // Set the loading status to false after the coordinates are fetched\n      setIsLoading(false);\n    }\n\n    // Fetch the coordinates when the location changes\n    useEffect(() => {\n      fetchCoordinates();\n    }, [location]);\n  };\n\n  // If the coordinates are being fetched, show a loading message\n  _s(fetchCoordinates, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Map is loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 16\n    }, this);\n  }\n\n  // If the coordinates are not found, show an error message\n  if (!coordinates) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Unable to fetch coordinates\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: coordinates,\n    zoom: 5,\n    style: {\n      height: '100%',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Marker, {\n      position: coordinates,\n      children: /*#__PURE__*/_jsxDEV(Popup, {\n        children: location\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n_s2(MapComponent, \"ynf4VDUe3xEex9nvX1WJAienIKc=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","Marker","Popup","axios","L","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","MapComponent","location","_s2","_s","$RefreshSig$","coordinates","setCoordinates","isLoading","setIsLoading","fetchCoordinates","response","get","data","length","lat","lon","parseFloat","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","style","height","width","url","position","_c","$RefreshReg$"],"sources":["D:/AI-Model-Training-Deployment-Genome-Sequencing_Girlgenius/Frontend/src/components/MapComponent.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport axios from 'axios';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\n\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\n\r\nL.Icon.Default.mergeOptions({\r\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n    iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png')\r\n});\r\n\r\n// This component houses the code for the Map page that shows the most likely location of the sequence on a dynamic and interactive map.\r\n\r\n// The MapComponent to be rendered on the MainContent component\r\nconst MapComponent = ({ location }) => {\r\n\r\n    // State to store the coordinates of the location\r\n    const [coordinates, setCoordinates] = useState(null);\r\n\r\n    // State to store the loading status while the coordinates are being fetched\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    // Function to fetch the coordinates of the location using the OpenStreetMap API\r\n    const fetchCoordinates = async () => {\r\n\r\n        // Search for the location coordinates using the OpenStreetMap API\r\n        try {\r\n\r\n            // Send a GET request to the OpenStreetMap API to fetch the coordinates\r\n            const response = await axios.get(`https://nominatim.openstreetmap.org/search?format=json&q=${location}`);\r\n\r\n            // If the response is not empty, set the coordinates state\r\n            if (response.data && response.data.length > 0) {\r\n                var { lat, lon } = response.data[0];\r\n                setCoordinates([parseFloat(lat), parseFloat(lon)]);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching coordinates:', error);\r\n        } finally {\r\n\r\n            // Set the loading status to false after the coordinates are fetched\r\n            setIsLoading(false);\r\n        }\r\n\r\n        // Fetch the coordinates when the location changes\r\n        useEffect(() => {\r\n            fetchCoordinates();\r\n        }, [location]);\r\n    \r\n    };\r\n\r\n    // If the coordinates are being fetched, show a loading message\r\n    if (isLoading) {\r\n        return <p>Map is loading...</p>;\r\n    }\r\n\r\n    // If the coordinates are not found, show an error message\r\n    if (!coordinates) {\r\n        return <p>Unable to fetch coordinates</p>;\r\n    }\r\n\r\n    return (\r\n        <MapContainer center={coordinates} zoom={5} style={{ height: '100%', width: '100%' }}>\r\n            <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n            <Marker position={coordinates}>\r\n                <Popup>{location}</Popup>\r\n            </Marker>\r\n        </MapContainer>\r\n    );\r\n};\r\n\r\nexport default MapComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}